{
  "name": "gulp-coffeelint",
  "version": "0.5.0",
  "description": "Lint your CoffeeScript using gulp and CoffeeLint",
  "keywords": [
    "gulpplugin",
    "lint",
    "coffee",
    "coffeelint",
    "coffeescript",
    "coffee-script",
    "codeconventions"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/janraasch/gulp-coffeelint.git"
  },
  "author": {
    "name": "Jan Raasch",
    "email": "jan@janraasch.com",
    "url": "http://janraasch.com"
  },
  "files": [
    "index.js",
    "lib/*.js"
  ],
  "scripts": {
    "prepublish": "gulp coffee --require \"coffee-script/register\"",
    "test": "coffeelint gulpfile.coffee index.coffee lib test -f ./coffeelint.json && istanbul test _mocha --report lcovonly -- ./test/*.coffee --require coffee-script/register --reporter spec",
    "coveralls": "cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js"
  },
  "dependencies": {
    "args-js": "^0.10.5",
    "coffeelint": "^1.4.0",
    "coffeelint-stylish": "^0.1.1",
    "gulp-util": "^3.0.0",
    "through2": "^0.6.1"
  },
  "devDependencies": {
    "coffee-script": "^1.7.1",
    "coffeelint-use-strict": "0.0.1",
    "conventional-changelog": "0.0.17",
    "coveralls": "^2.8.0",
    "del": "^1.1.1",
    "gulp": "^3.5.2",
    "gulp-coffee": "^2.1.2",
    "istanbul": "^0.3.0",
    "mocha": "^2.1.0",
    "proxyquire": "^1.4.0",
    "should": "^6.0.1",
    "sinon": "^1.8.1"
  },
  "engines": {
    "npm": ">=1.3.7",
    "node": ">=0.10.0"
  },
  "license": "MIT",
  "readme": "# gulp-coffeelint [![Build Status][travis-image]][travis-url] [![Coverage Status][coveralls-image]][coveralls-url] [![NPM version][npm-image]][npm-url]\n[![Dependency Status][depstat-image]][depstat-url] [![devDependency Status][devdepstat-image]][devdepstat-url] ![Pretty Stylish](http://img.shields.io/badge/pretty-stylish-ff69b4.svg)\n\n> [CoffeeLint](http://www.coffeelint.org/) plugin for [gulp][gulp] 3.\n\n## Usage\n\nFirst, install `gulp-coffeelint` as a development dependency:\n\n```shell\nnpm install --save-dev gulp-coffeelint\n```\n\nThen, add it to your `gulpfile.js`:\n\n```javascript\nvar gulp = require('gulp');\nvar coffeelint = require('gulp-coffeelint');\n\ngulp.task('lint', function () {\n    gulp.src('./src/*.coffee')\n        .pipe(coffeelint())\n        .pipe(coffeelint.reporter())\n});\n```\n\n## API\n\n### `coffeelint([optFile,] [opt,] [literate,] [rules])`\nAll arguments are optional. By default `gulp-coffeelint` will walk up the directory tree looking for a `coffeelint.json` (per file, i.e. dirname) or a `package.json` that has a `coffeelintConfig` object ([as the cli does](http://www.coffeelint.org/#usage)). Also, `.litcoffee` and `.coffee.md` files will be treated as Literate CoffeeScript.\n\n### optFile\nType: `String`\n\nAbsolute path of a `json` file containing [options][coffeelint-options] for `coffeelint`.\n\n### opt\nType: `Object`\n\n[Options][coffeelint-options] you wish to send to `coffeelint`. If `optFile` is given, this will be ignored.\n\n### literate\nType: `Boolean`\n\nAre we dealing with Literate CoffeeScript?\n\n### rules\nType: `Array[Function]`\nDefault: `[]`\n\nAdd [custom rules](http://www.coffeelint.org/#api) to `coffeelint`.\n\n## Results\n\nAdds the following properties to the `file` object:\n```javascript\nfile.coffeelint.success = true; // if no errors were found, false otherwise\nfile.coffeelint.errorCount = 0; // number of errors returned by `coffeelint`\nfile.coffeelint.warningCount = 0; // number of warnings returned by `coffeelint`\nfile.coffeelint.results = ErrorReport Object; // instance of `Coffeelint::ErrorReport` , see https://github.com/clutchski/coffeelint/blob/master/src/error_report.coffee\nfile.coffeelint.opt = {}; // the options used by `coffeelint`\nfile.coffeelint.literate = false; // you guessed it\n```\n\n## Reporters\n\n### name\nType: `String`, `Function`\nDefault: `'coffeelint-stylish'`\n\n### CoffeeLint reporters\n\n#### Built-in\n\nYou can choose any [CoffeeLint reporter](https://github.com/clutchski/coffeelint/tree/master/src/reporters)\nwhen you call\n\n```js\nstuff\n  .pipe(coffeelint())\n  .pipe(coffeelint.reporter('csv'))\n```\n\n#### External\n\nLet's use [coffeelint-stylish](https://github.com/janraasch/coffeelint-stylish) as an example. External modules can be referenced either as\nthe reporter's constructor function or as its module name.\n\n```js\nvar stylish = require('coffeelint-stylish');\n\ngulp.src('./src/*.coffee')\n  .pipe(coffeelint())\n  .pipe(coffeelint.reporter(stylish))\n```\n\n-- OR --\n\n```js\ngulp.src('./src/*.coffee')\n  .pipe(coffeelint())\n  .pipe(coffeelint.reporter('coffelint-stylish'))\n```\n\nAny module following the CoffeeLint Reporter module format should work. These modules have a constructor accepting a `CoffeeLint::ErrorReport Object`, and provide a `publish` function.\n\n### Fail and FailOnWarning Reporters\n\nDo you want the task to fail when a CoffeeLint error or warning happens? gulp-coffeelint includes `fail` and `failOnWarning` reporters for this.\n\nThis example will log the errors using the stylish reporter, then fail if CoffeeLint was not a success.\n\n```js\ngulp.src('./src/*.coffee')\n  .pipe(coffeelint())\n  .pipe(coffeelint.reporter('coffeelint-stylish'))\n  .pipe(coffeelint.reporter('fail'))\n```\n\n### Custom Reporters\n\nSpecify your own downstream Reporter for CoffeeLint results.\n\n```js\nvar coffeelint = require('gulp-coffeelint');\n\nvar myReporter = (function() {\n  function MyReporter(errorReport) {\n    this.errorReport = errorReport;\n  }\n\n  MyReporter.prototype.publish = function() {\n    var hasError = this.errorReport.hasError();\n    if (hasError) {\n      return console.log('Oh no!');\n    }\n    return console.log('Oh yeah!');\n  }\n\n  return MyReporter;\n})();\n\ngulp.task('lint', function() {\n  return gulp.src('./src/*.coffee')\n    .pipe(coffeelint())\n    .pipe(coffeelint.reporter(myReporter));\n});\n```\n\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [gulp][gulp] and [npm-test](https://npmjs.org/doc/test.html). Plus, make sure to adhere to these [commit message conventions](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.uyo6cb12dt6w).\n\n## License\n\n[MIT License](http://en.wikipedia.org/wiki/MIT_License) Â© [Jan Raasch](http://janraasch.com)\n\n[gulp]: http://gulpjs.com/\n[coffeelint-options]: http://www.coffeelint.org/#options\n\n[npm-url]: https://npmjs.org/package/gulp-coffeelint\n[npm-image]: http://img.shields.io/npm/v/gulp-coffeelint.svg\n\n[travis-url]: http://travis-ci.org/janraasch/gulp-coffeelint\n[travis-image]: https://travis-ci.org/janraasch/gulp-coffeelint.svg?branch=master\n\n[coveralls-url]: https://coveralls.io/r/janraasch/gulp-coffeelint\n[coveralls-image]: https://img.shields.io/coveralls/janraasch/gulp-coffeelint.svg\n\n[depstat-url]: https://david-dm.org/janraasch/gulp-coffeelint\n[depstat-image]: https://david-dm.org/janraasch/gulp-coffeelint.svg\n\n[devdepstat-url]: https://david-dm.org/janraasch/gulp-coffeelint#info=devDependencies\n[devdepstat-image]: https://david-dm.org/janraasch/gulp-coffeelint/dev-status.svg\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/janraasch/gulp-coffeelint/issues"
  },
  "homepage": "https://github.com/janraasch/gulp-coffeelint",
  "_id": "gulp-coffeelint@0.5.0",
  "_shasum": "3bddaac4571a872b6b56c2b8f66486746bb8a3c2",
  "_from": "gulp-coffeelint@>=0.5.0 <0.6.0",
  "_resolved": "https://registry.npmjs.org/gulp-coffeelint/-/gulp-coffeelint-0.5.0.tgz"
}
